<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nothing is important.</title>
    <description>I will show my best.</description>
    <link>http://wing-of-war.github.io//</link>
    <atom:link href="http://wing-of-war.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 20 Aug 2014 01:07:17 +0800</pubDate>
    <lastBuildDate>Wed, 20 Aug 2014 01:07:17 +0800</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>Cocoapods进阶教程</title>
        <description>&lt;p&gt;作为第一篇正式技术性Blog，主要是为了记录最近研究的Cocoapods在项目中的使用（虽然也还不是特别懂：P）。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;文章说明：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;可能会有点啰嗦，想详细点，个人比较健忘，重点会标明&lt;/li&gt;
  &lt;li&gt;有些问题我也没研究明白，但以可用为主&lt;/li&gt;
  &lt;li&gt;欢迎指教，Email: wing.of.war.1980th@gmail.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cocoapods的教程一般都是基本的入门（大约是如我下图所示的Step2)，官方文档感觉对于新手也不够友好（至少像我这样的半桶水研究了两个晚上），所以一半教学一半记录吧。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;此文的结构如下图步骤所示：&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/Cocoapods%20article%20%20structure.jpg&quot; alt=&quot;Cocoapods article  structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;正文——像一个普通工程开始&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Step1: 创建一个新工程&lt;/li&gt;
  &lt;li&gt;Step2: 通过CocoaPods导入几个常见框架（当然，说明项目中不会导入那么多，将以AFNetworking为例）
&lt;strong&gt;Step 2.2&lt;/strong&gt;将说明如果卸载CocoaPods&lt;strong&gt;（非常有用）&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Step3: 创建一个个人类库（这将不会出现于Cocoapods的官方类库列表）。
&lt;strong&gt;Step 3.1&lt;/strong&gt; 是通过Cocoapods创建的一个类库，保存与管理于Github上，在自己的项目中进行引用。便于团队的协作开发。
&lt;strong&gt;Step 3.2&lt;/strong&gt;是在项目中建立一个私有类库，引用方式为相对路径，&lt;strong&gt;好处是如果项目是私有的，将可以一起同项目保密和同步&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Step4：工程需要进行扩展，在一个workspace下建立了多个target或者是导入了多个project，&lt;strong&gt;重点是Podfile的配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后本文的内容就会以上面的步骤的逐步进行，读者可以根据自身的需要来选择章节。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;几个关键点&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;一个很好的&lt;a href=&quot;http://code4app.com/article/cocoapods-install-usage&quot;&gt;安装教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;多个项目工程使用同一个Cocoapods的Podfile的编写&lt;/li&gt;
  &lt;li&gt;*.podspec文件的编写&lt;/li&gt;
  &lt;li&gt;使用CocoaPoads对自身项目中的私有类库进行管理&lt;/li&gt;
  &lt;li&gt;从Github导入个人类库&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Wing-Of-War/CocoaPods_Demo&quot;&gt;Demo项目&lt;/a&gt;，&lt;a href=&quot;https://github.com/Wing-Of-War/MyPrivateLibs&quot;&gt;Demo框架&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step2-cocoapoads&quot;&gt;Step2 工程导入CocoaPoads&lt;/h2&gt;

&lt;p&gt;虽然是进阶教程，但我还是把基本的操作和常用的方法写一下，如果大家有更简便的方法可以我指点一下。&lt;/p&gt;

&lt;p&gt;在桌面上，我新建了一个文件夹为将来的整体项目&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir CocoaPods_Demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在此文件夹下，我建立了一个iPhone项目，命名为MyProject
进入到此项目下，pod初始化。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd MyProject
pod init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者直接在此文件夹下创建一个podfile文件，编辑podfile的内容如下，添加一个AFNetworking框架（非常好的类库示例，研究了很多）:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Uncomment this line to define a global platform for your project
# platform :ios, &quot;6.0&quot;

target &quot;MyProject&quot; do
pod &quot;AFNetworking&quot; 
end


target &quot;MyProjectTests&quot; do

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开MyProject，此后使用的将是MyProject.xcworkspace这种以.xcworkspace为后缀的工作空间。在ViewController中我们可以尝试导入一下&amp;lt;AFNetworking/…&amp;gt;，如下图所示提示相关的头文件，则导入的框架AFNetworking工作正常。
&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/AFNetworking%20import.png&quot; alt=&quot;AFNetworking import&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/CocoaPods/guides.cocoapods.org/issues/14&quot;&gt;补充:pod install和pod update命令的区别&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;
* pod install作为初次安装
* pod update为变更podfile和导入类库升级时使用&lt;/p&gt;

&lt;h3 id=&quot;step21-cocoapods&quot;&gt;Step2.1 类库移除&amp;amp;CocoaPods卸载&lt;/h3&gt;

&lt;h4 id=&quot;section-4&quot;&gt;类库移除&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;在podfile文件中移除相应的类库引入行，然后执行&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将自动移除多余的框架&lt;/p&gt;

&lt;h4 id=&quot;cocoapods&quot;&gt;CocoaPods卸载&lt;/h4&gt;

&lt;p&gt;转自&lt;a href=&quot;http://blog.csdn.net/freedom2028/article/details/10244819&quot;&gt;《从工程中删除Cocoapods》&lt;/a&gt;:
* 删除工程文件夹下的Podfile、Podfile.lock及Pods文件夹
* 删除xcworkspace文件
* &lt;strong&gt;&lt;em&gt;使用xcodeproj文件打开工程，删除Frameworks组下的Pods.xcconfig及libPods.a引用&lt;/em&gt;&lt;/strong&gt;
* 在工程设置中的Build Phases下删除Check Pods Manifest.lock及Copy Pods Resources&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/CocoaPods%20Delete.png&quot; alt=&quot;CocoaPods Delete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上几点中，第三点中删除xcconfig应该是核心点，它是Cocoapods链接各个类库的关键。经常有可能Podfile写错后，生成多个xcconfig造成工程的头文件引入编译错误。此时可以先用此方法进行一次卸载后，重新初始化Cocoapods。&lt;/p&gt;

&lt;h2 id=&quot;step3-&quot;&gt;Step3 创建个人类库&lt;/h2&gt;

&lt;p&gt;创建类库的pod命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod lib create &quot;MyPrivateLibs&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/MyPrivateLibs%20Create.png&quot; alt=&quot;CocoaPods library create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建是使用的Cocoapods的模板类，几个选项默认就好。进入此文件夹，
&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/MyPrivateLibs%20files.png&quot; alt=&quot;MyPrivateLibs files&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example是模板中创建的测试工程项目，Example下已经自带podfile并且在运行install命令后，会自动导入这个类库，可以很方便的进行编写与测试；&lt;/li&gt;
  &lt;li&gt;MyPrivateLibs.podspec&lt;strong&gt;非常重要&lt;/strong&gt;，几乎是整个类库用于导入与存储结构的核心，不过目前步骤使用默认即可；&lt;/li&gt;
  &lt;li&gt;Pod在默认包含Assets和Classes两个文件夹，一个用于存放图片，一个用于存放框架文件，在使用黑夜MyPrivateLibs.podspec的情况下，按此分类放好类库文件。&lt;/li&gt;
  &lt;li&gt;LICENSE和README.md顾名思义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在我们在Example里的项目中，添加一个类别（可以向类别扩展属性），命名为AssociatedObjects
.h文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface NSObject (AssociatedObjects)
- (void)associateValue:(id)value withKey:(void *)key;
- (id)associatedValueForKey:(void *)key;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.m文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &quot;NSObject+AssociatedObjects.h&quot;
#import &amp;lt;objc/runtime.h&amp;gt;
@implementation NSObject (AssociatedObjects)
- (void)associateValue:(id)value withKey:(void *)key
{
    objc_setAssociatedObject(self, key, value, OBJC_ASSOCIATION_RETAIN);
}
- (id)associatedValueForKey:(void *)key
{
    return objc_getAssociatedObject(self, key);
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;写一个简单的测试方法，向一个NSArray中关联了一个日期，十秒后取出，一切正常工作～&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/MyPrivateLibs%20Test.png&quot; alt=&quot;MyPrivateLibs Test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以下是我目前自己的方法&lt;/p&gt;

&lt;p&gt;1、把&lt;code&gt;NSObject+AssociatedObjects.h&lt;/code&gt;和&lt;code&gt;NSObject+AssociatedObjects.m&lt;/code&gt;两个文件移动到&lt;code&gt;/MyPrivateLibs/Pod/Classes&lt;/code&gt;下
2、在Example中运行
~~~
pod update命令
~~~
3、打开Example中的测试项目，删除原项目中的.h和.m文件（当然，当前已经显示为文件无法找寻状态）然后在引用地方导入&lt;code&gt;&amp;lt;MyPrivateLibs/NSObject+AssociatedObjects.h&amp;gt;&lt;/code&gt;
4、如果测试正常，则说明此类库建立正常&lt;/p&gt;

&lt;h3 id=&quot;step31-github&quot;&gt;Step3.1 导入Github类库&lt;/h3&gt;

&lt;p&gt;根据之前的步骤，将MyPrivateLibs提交到Github，我的
&lt;a href=&quot;https://github.com/Wing-Of-War/MyPrivateLibs&quot;&gt;MyPrivateLibs&lt;/a&gt;:https://github.com/Wing-Of-War/MyPrivateLibs
如果为了方便，则可以直接引用我这个框架&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果是要直接引用Github上的类库，则务必将 .podspec文件放在类库的最上层目录中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;回到&lt;code&gt;CocoaPods_Demo/MyProject/&lt;/code&gt;中，修改Podfile如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;target &quot;MyProject&quot; do
pod &quot;AFNetworking&quot; 
pod &quot;MyPrivateLibs&quot;, github =&amp;gt; &quot;https://github.com/Wing-Of-War/MyPrivateLibs&quot;
end


target &quot;MyProjectTests&quot; do

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后install一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/MyPrivateLibs%20import.png&quot; alt=&quot;MyPrivateLibs import&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看见Installing MyPrivateLibs (0.1.0）已经正常安装，打开MyProject.xcworkspace，在Pod项目中，MyPrivateLibs和两个类库文件出现。然后测试一下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/After%20Import%20MyPrivateLibs%20Test.png&quot; alt=&quot;After Import MyPrivateLibs Test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一切工作正常，说明导入和类库都是正常的。&lt;/p&gt;

&lt;p&gt;OK，接下来更多干货马上出现～&lt;/p&gt;

&lt;h3 id=&quot;step32-&quot;&gt;Step3.2 导入本地类库&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;需求的来源&lt;/strong&gt;———我们公司的项目是保存于Github上的一个私有repositories中，所以此项目中写的一些框架当然不能随便公开啦。
但为了管理方便和自己使用方法（只有我一个人在弄这个项目），我希望把其中的一部分&lt;strong&gt;固定核心代码&lt;/strong&gt;从原项目中独立出来，做为一个私有内部框架，这也是为Step4做准备，所以折腾这个步骤了很久。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;创建简单的框架&lt;/h4&gt;

&lt;p&gt;在MyProject中，我创建了一个用于转换RFC3339的时间与字符串的转换方法类。&lt;/p&gt;

&lt;p&gt;MyTimeTool.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface MyTimeTool : NSObject

+ (NSDate *)rfc3339DateFormatterParse:(NSString *)string isExtend:(BOOL)isExtend;
+ (NSString *)rfc3339DateFormatterGenerate:(NSDate *)date isExtend:(BOOL)isExtend;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MyTimeTool.m，本来是自己写的方法，后来根据Apple官方文档改的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
+ (NSString *)rfc3339DateFormatterGenerate:(NSDate *)date isExtend:(BOOL)isExtend
{
    static NSDateFormatter *dateFormatter = nil;
    if (!dateFormatter) {
        dateFormatter = [[NSDateFormatter alloc] init];
        NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US_POSIX&quot;];
        [dateFormatter setLocale:enUSPOSIXLocale];
        [dateFormatter setTimeZone:[NSTimeZone timeZoneWithAbbreviation:@&quot;UTC&quot;]];
        [dateFormatter setDateFormat:@&quot;yyyyMMdd&#39;T&#39;HHmmss&#39;Z&#39;&quot;];
    }
    //    NSLog(@&quot;rfc3339DateFormatterGenerate is %@, originDate is %@&quot;,[dateFormatter stringFromDate:date] , date);
    return [dateFormatter stringFromDate:date];
}


+ (NSDateFormatter *)getRfc3339ExtendFormatter
{
    static NSDateFormatter *rfc3339ExtendFormatter = nil;
    if (!rfc3339ExtendFormatter) {
        rfc3339ExtendFormatter = [[NSDateFormatter alloc] init];
        NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US_POSIX&quot;];
        [rfc3339ExtendFormatter setLocale:enUSPOSIXLocale];
        [rfc3339ExtendFormatter setDateFormat:@&quot;yyyy&#39;-&#39;MM&#39;-&#39;dd&#39;T&#39;HH&#39;:&#39;mm&#39;:&#39;ss&#39;.&#39;SSS&#39;Z&#39;&quot;];
        [rfc3339ExtendFormatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
    }
    return rfc3339ExtendFormatter;
}

+ (NSDateFormatter *)getRfc3339ShortFormatter
{
    static NSDateFormatter *rfc3339ShortFormatter = nil;
    if (!rfc3339ShortFormatter) {
        rfc3339ShortFormatter = [[NSDateFormatter alloc] init];
        NSLocale *enUSPOSIXLocale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US_POSIX&quot;];
        [rfc3339ShortFormatter setLocale:enUSPOSIXLocale];
        [rfc3339ShortFormatter setDateFormat:@&quot;yyyyMMdd&#39;T&#39;HHmmss&#39;Z&#39;&quot;];
        [rfc3339ShortFormatter setTimeZone:[NSTimeZone timeZoneForSecondsFromGMT:0]];
    }
    return rfc3339ShortFormatter;    
}

+ (NSDate *)rfc3339DateFormatterParse:(NSString *)string isExtend:(BOOL)isExtend
{
    NSDateFormatter *parseFormatter = nil;
    if (isExtend) {
        parseFormatter = [self getRfc3339ExtendFormatter];
    }else
    {
        parseFormatter = [self getRfc3339ShortFormatter];
    }
    NSDate *result = [parseFormatter dateFromString:string];
    //    NSLog(@&quot;rfc3339DateFormatterParse result is %@, origin stirng is %@&quot;, result, string );
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就以这两个文件为例创建一个本地类库&lt;/p&gt;

&lt;p&gt;从终端进入到CocoaPods_Demo文件下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod lib create MyLocalLib

..............................

Would you like to have a demo for your library? [ Yes / No ]
 &amp;gt; NO

Which testing frameworks will you use? [ Specta / Kiwi ]
 &amp;gt; 
specta
Would you like to do view based testing? [ Yes / No ]
 &amp;gt; NO

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与之前的过程是类似的，但我们可以简单点，移植过来的类库都是已经在原有项目中测试过的。&lt;/p&gt;

&lt;p&gt;为了丰富一下这个本地类库，我们将会把MyPrivate项目里的框架也一并移植过来。&lt;/p&gt;

&lt;p&gt;进入&lt;code&gt;MyLocalLib&lt;/code&gt;目录下，分别创建一个&lt;code&gt;MyTimeTool&lt;/code&gt;和&lt;code&gt;MyCategory&lt;/code&gt;两个文件夹。将MyPrivate项目中的两个文件放入&lt;code&gt;MyCategory&lt;/code&gt;中，将&lt;code&gt;MyTimeTool.h&lt;/code&gt;和&lt;code&gt;MyTimeTool.m&lt;/code&gt;文件放入MyTimeTool中，并且可以删除&lt;code&gt;Pod&lt;/code&gt;和&lt;code&gt;Example&lt;/code&gt;两个文件夹，让我们的Lib看起来更纯粹一点。&lt;/p&gt;

&lt;h4 id=&quot;podspec&quot;&gt;编写. podspec文件&lt;/h4&gt;
&lt;p&gt;因为是ruby的语法，虽然我不懂，但在参考了其它几个比较成熟的Cocoapods后，写出来个配置文件也是能够work的。先把写好的配置文件粘上来，再解释一下相关的字段。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;请注意所有的编写一定要不要Mac系统自带的文本处理器，经常会将&lt;code&gt;&#39;&lt;/code&gt;打成&lt;code&gt;‘&lt;/code&gt;。推荐使用&lt;code&gt;Sumblime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Pod::Spec.new do |s|
  s.name             = &quot;MyLocalLib&quot;
  s.version          = &quot;0.1.0&quot;
  s.summary          = &quot;A short description of MyLocalLib.&quot;
  s.description      = &amp;lt;&amp;lt;-DESC
                       An optional longer description of MyLocalLib

                       * Markdown format.
                       * Don&#39;t worry about the indent, we strip it!
                       DESC
  s.homepage         = &quot;https://github.com/&amp;lt;GITHUB_USERNAME&amp;gt;/MyLocalLib&quot;
  # s.screenshots     = &quot;www.example.com/screenshots_1&quot;, &quot;www.example.com/screenshots_2&quot;
  s.license          = &#39;MIT&#39;
  s.author           = { &quot;wing.of.war.1980th&quot; =&amp;gt; &quot;wing.of.war.1980th@gmail.com&quot; }
  s.source           = { :git =&amp;gt; &quot;https://github.com/&amp;lt;GITHUB_USERNAME&amp;gt;/MyLocalLib.git&quot;, :tag =&amp;gt; s.version.to_s }
  # s.social_media_url = &#39;https://twitter.com/&amp;lt;TWITTER_USERNAME&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这部分是此类库的对外信息，很容易修改，&lt;em&gt;s.name&lt;/em&gt;里的类库名称不要拼错，是与podfile中的引用名称所对应的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  s.ios.deployment_target = &#39;7.0&#39;
  s.osx.deployment_target = &#39;10.9&#39;
  s.requires_arc = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此部分是类库的使用平台信息，我这里不仅设置了iOS平台，也设置了Mac OS平台。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  s.public_header_files = &#39;*.h&#39;
  s.source_files = &#39;MyLocalLibHeader.h&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果有此文件，将会做为此类库的公共头文件。这样在框架导入的时候，使用者可以在自己&lt;code&gt;MyProject-Prefix.pch&lt;/code&gt;文件中直接引入此文件。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;重点部分&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;  s.subspec &#39;MyCategory&#39; do |ss|
        ss.source_files = &#39;MyCategory/*.{h,m}&#39;
        ss.dependency &#39;FMDB&#39;
        # s.frameworks = &#39;UIKit&#39;, &#39;MapKit&#39;
  end

  s.subspec &#39;DataCenter&#39; do |ss|
        ss.source_files = &#39;MyTimeTool/*.{h,m}&#39;
        # ss.dependency &#39;AFNetworking&#39;
  end

  # s.public_header_files = &#39;Pod/Classes/**/*.h&#39;
  # s.frameworks = &#39;UIKit&#39;, &#39;MapKit&#39;
  # s.dependency &#39;AFNetworking&#39;, &#39;~&amp;gt; 2.3&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;s.subspec ‘MyCategory’ do |ss|
 应该是创建一个子模块，在项目中的体现是创建了一个文件夹，在此模块下的文件将保存于此文件夹下&lt;/li&gt;
  &lt;li&gt;ss.source_files = ‘MyCategory/*.{h,m}’ 指定这些源文件的路径，这个是MyCategory模块，所以我们指向&lt;code&gt;MyCategory/&lt;/code&gt;文件夹下的所有源文件，当然也可以直接指定具体文件，但肯定不如这种遍历的形式方便； &lt;/li&gt;
  &lt;li&gt;ss.dependency是依赖其它的Cocoapods的类库，这里为了演示，依赖了&lt;code&gt;FMDB&lt;/code&gt;这个Sqlite处理框架&lt;/li&gt;
  &lt;li&gt;s.frameworks应该是依赖的apple框架，我们这里都写的简单类库，就不再引用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK，准备工作做完后，开始导入。这是我当前项目的文件夹结构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/file%20struct.png&quot; alt=&quot;file struct&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果是用路径引用，则podfile中的路径一定要能指向类库的.podspec文件&lt;/em&gt;&lt;/strong&gt;
所以，将podfile更改为如下
~~~
target “MyProject” do
	pod “AFNetworking” 
    pod “MyLocalLib”, :path =&amp;gt; “../MyLocalLib”
end
~~~&lt;/p&gt;

&lt;p&gt;&lt;code&gt;../MyLocalLib&lt;/code&gt;表示的路径为上一级目录下的&lt;code&gt;MyLocalLib&lt;/code&gt;文件，此文件下包括了.podspec&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/import%20LocalLib.png&quot; alt=&quot;import LocalLib&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不仅安装了MyLocalLib框架，并且通过&lt;code&gt;ss.dependency &#39;FMDB&#39;&lt;/code&gt;导入了&lt;code&gt;FMDB&lt;/code&gt;类库。打开工程文件，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/Mylocallib%20insatll.png&quot; alt=&quot;Mylocallib insatll&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过GitHub安装的MyPrivateLib框架已经移除&lt;/li&gt;
  &lt;li&gt;MyLocalLib已经导入可以正常使用&lt;/li&gt;
  &lt;li&gt;MyLocalLib保持了其原文件结构&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step4-cocoapoads&quot;&gt;Step4 工作空间使用CocoaPoads&lt;/h2&gt;

&lt;p&gt;最后一个部分，既然我项目的核心功能部分独立出来，那我在多个平台上都可以用。所以我们在&lt;code&gt;MyProject\MyProject.xcworkspace&lt;/code&gt;的工作空间下添加了一个Mac项目&lt;code&gt;MyMacProject&lt;/code&gt;,此项目也将引用我们之前使用的&lt;code&gt;MyLocalLib&lt;/code&gt;和&lt;code&gt;AFNetworking&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了增加一点配置文件编写难度和保持项目的平级性，我们的文件结构是如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/MacProject%20file%20structure.png&quot; alt=&quot;MacProject file structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Podfile&lt;/code&gt;的配置文件是位于&lt;code&gt;MyProject&lt;/code&gt;下的。所以根据之前在导入&lt;code&gt;MyLocalLib&lt;/code&gt;时所写的配置也会有些技巧。根据多处查找资料和研究别人的类库，是需要根据每一个工程中的Targe来建立与CocoaPods的关联，每一个target都要把相应的&lt;code&gt;*.xcodeproj&lt;/code&gt;的位置在其中进行描述。同时我也对&lt;code&gt;target&lt;/code&gt;所使用的平台进行了描述，免得在导入一些类库时引起一些版本上的限制。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workspace &#39;MyProject&#39;

target &#39;MyProject&#39; do
    platform :ios, &#39;7.0&#39;
	pod &quot;AFNetworking&quot; 
    pod &quot;MyLocalLib&quot;, :path =&amp;gt; &quot;../MyLocalLib&quot;
	xcodeproj &#39;MyProject.xcodeproj&#39;
end

target &#39;MyMacProject&#39; do
    platform :osx, &#39;10.9&#39;
	pod &quot;AFNetworking&quot; 
    pod &quot;MyLocalLib&quot;, :path =&amp;gt; &quot;../MyLocalLib&quot;
	xcodeproj &#39;../MyMacProject/MyMacProject.xcodeproj&#39;
end

target &quot;MyProjectTests&quot; do

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;MyProject\&lt;/code&gt;目录下运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令。完成后，再打开&lt;code&gt;MyProject.xcworkspace&lt;/code&gt;工作空间，已经如下图所示，在MyMacProject中导入&lt;code&gt;MyLocalLib&lt;/code&gt;类库，一切正常～&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Wing-Of-War/wing-of-war.github.com/master/_postsImages/2014/08/MacProject%20import%20MyLocalLib.png&quot; alt=&quot;MacProject import MyLocalLib&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://wing-of-war.github.io//cn/2014/08/10/Cocoapods-Research-CN/</link>
        <guid isPermaLink="true">http://wing-of-war.github.io//cn/2014/08/10/Cocoapods-Research-CN/</guid>
        
        
        <category>cn</category>
        
      </item>
    
      <item>
        <title>My first blog in github</title>
        <description>&lt;h1 id=&quot;my-first-blog-in-github&quot;&gt;My first blog in github&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;9 August 2014 - BeiJing&lt;/p&gt;

&lt;p&gt;I had set serval target to myself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyll is not easy to use, but very fascinating, I want to good to use it.&lt;/li&gt;
  &lt;li&gt;Each post of this blog will be published in Chinese and English.(I’m exercising my English writing skills)&lt;/li&gt;
  &lt;li&gt;Improve the web site every week.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 09 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://wing-of-war.github.io//en/2014/08/09/FirstPost-EN/</link>
        <guid isPermaLink="true">http://wing-of-war.github.io//en/2014/08/09/FirstPost-EN/</guid>
        
        
        <category>en</category>
        
      </item>
    
      <item>
        <title>GitHub 上的第一贴（My first blog in github）</title>
        <description>&lt;h1 id=&quot;github-&quot;&gt;GitHub 上的第一贴&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;9 August 2014 - BeiJing&lt;/p&gt;

&lt;p&gt;我在这里设立了几个目标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过Jekyll来打造Github上的技术博客，学习与使用一些Html技术&lt;/li&gt;
  &lt;li&gt;每一遍技术博客都是中英文双语&lt;/li&gt;
  &lt;li&gt;保持更新量，并且争取投稿&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ps2014-8-20&quot;&gt;PS:补于2014-8-20，文章分类后&lt;/h3&gt;
</description>
        <pubDate>Sat, 09 Aug 2014 00:00:00 +0800</pubDate>
        <link>http://wing-of-war.github.io//cn/2014/08/09/FirstPost-CN/</link>
        <guid isPermaLink="true">http://wing-of-war.github.io//cn/2014/08/09/FirstPost-CN/</guid>
        
        
        <category>cn</category>
        
      </item>
    
  </channel>
</rss>
